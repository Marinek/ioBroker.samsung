{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport Samsung, { KEYS } from \"samsung-tv-control\";\n\nclass Samsung2022TvAdapter extends utils.Adapter {\n\tprivate control: Samsung | undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"samsung_2022_tv_adapter\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", false, true);\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tthis.log.info(\"config IP: \" + this.config.IP);\n\t\tthis.log.info(\"config MAC: \" + this.config.MAC);\n\n\t\tconst config = {\n\t\t\tdebug: false, // Default: false\n\t\t\tip: this.config.IP,\n\t\t\tmac: this.config.MAC,\n\t\t\tnameApp: \"Adapter Remote\", // Default: NodeJS\n\t\t\tport: 8002, // Default: 8002\n\t\t\ttoken: \"11255133\",\n\t\t\tsaveToken: false,\n\t\t};\n\n\t\tthis.control = new Samsung(config);\n\n\t\tfor (const keyName in KEYS) {\n\t\t\tthis.createState(\n\t\t\t\t\"Remote\",\n\t\t\t\t\"\",\n\t\t\t\tkeyName,\n\t\t\t\t{\n\t\t\t\t\trole: \"button.press\",\n\t\t\t\t\twrite: true,\n\t\t\t\t\tdef: false,\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdontDelete: true,\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\tthis.createState(\n\t\t\t\"TV\",\n\t\t\t\"\",\n\t\t\t\"on\",\n\t\t\t{\n\t\t\t\trole: \"switch\",\n\t\t\t\twrite: true,\n\t\t\t\tread: true,\n\t\t\t\tdef: false,\n\t\t\t\ttype: \"boolean\",\n\t\t\t\tdontDelete: true,\n\t\t\t},\n\t\t\tundefined,\n\t\t);\n\t\tthis.setState(\"TV.on\", false, true);\n\t\tthis.subscribeStates(\"*\");\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.setState(\"info.connection\", true, true);\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\tlet result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n\t\tthis.log.info(\"check user admin pw iobroker: \" + result);\n\n\t\tresult = await this.checkGroupAsync(\"admin\", \"admin\");\n\t\tthis.log.info(\"check group user admin group admin: \" + result);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${JSON.stringify(state)} (ack = ${state.ack})`);\n\n\t\t\tconst keyName = id.split(\".\")[3];\n\t\t\tif (!keyName) {\n\t\t\t\tthis.log.warn(\"No keyname found!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.log.info(`found keyname: '${keyName}'`);\n\t\t\t}\n\n\t\t\tif (this.control == undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.control\n\t\t\t\t.isAvailable()\n\t\t\t\t.then((value) => {\n\t\t\t\t\tthis.log.info(`TV aviable: '${value}'`);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.log.info(\"TV seems to be offline\" + error);\n\t\t\t\t\tif (keyName === \"on\") {\n\t\t\t\t\t\tthis.log.info(\"Sending WOL to wake up the TV.\");\n\t\t\t\t\t\tif (this.control) {\n\t\t\t\t\t\t\tthis.control.turnOn();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.log.info(\"TV is offline, doing nothing.\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tthis.control\n\t\t\t\t.isAvailable()\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst enumKeyName: KEYS = KEYS[keyName as keyof typeof KEYS];\n\n\t\t\t\t\tif (this.control == undefined) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Send key to TV\n\t\t\t\t\tthis.control.sendKey(enumKeyName, function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t//throw new Error();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Control will keep connection for next messages in 1 minute\n\t\t\t\t\t// If you would like to close it immediately, you can use `closeConnection()`\n\t\t\t\t\tthis.control.closeConnection();\n\t\t\t\t})\n\t\t\t\t.catch((e) => console.error(e));\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Samsung2022TvAdapter(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Samsung2022TvAdapter())();\n}\n"],
  "mappings": "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",
  "names": []
}
