{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport Samsung, { KEYS } from \"samsung-tv-control\";\n\nconst STATE_NAME_INFO_CONNECTION = \"info.connection\";\n\nclass Samsung2022TvAdapter extends utils.Adapter {\n\tprivate control: Samsung | undefined;\n\n\tprivate refreshTimeout: NodeJS.Timeout | undefined;\n\tprivate retryConnectionTimeout: NodeJS.Timeout | undefined;\n\tprivate refreshIntervalInMinutes = 1;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"samsung_2022_tv_adapter\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(STATE_NAME_INFO_CONNECTION, false, true);\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tthis.log.info(\"config IP: \" + this.config.IP);\n\t\tthis.log.info(\"config MAC: \" + this.config.MAC);\n\t\tthis.log.info(\"config REMOTE_NAME: \" + this.config.REMOTE_NAME);\n\t\tthis.log.debug(\"config TOKEN: \" + this.config.TOKEN);\n\n\t\tconst config = {\n\t\t\tdebug: false, // Default: false\n\t\t\tip: this.config.IP,\n\t\t\tmac: this.config.MAC,\n\t\t\tnameApp: this.config.REMOTE_NAME || \"Remote Adapter\", // Default: NodeJS\n\t\t\tport: 8002, // Default: 8002\n\t\t\ttoken: this.config.TOKEN,\n\t\t\tsaveToken: false,\n\t\t};\n\n\t\tthis.control = new Samsung(config);\n\n\t\tif (!this.config.TOKEN || this.config.TOKEN === \"\") {\n\t\t\tthis.firstInit();\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const keyName in KEYS) {\n\t\t\tthis.createState(\n\t\t\t\t\"Remote\",\n\t\t\t\t\"\",\n\t\t\t\tkeyName,\n\t\t\t\t{\n\t\t\t\t\trole: \"button.press\",\n\t\t\t\t\twrite: true,\n\t\t\t\t\tdef: false,\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdontDelete: true,\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\tthis.createState(\n\t\t\t\"TV\",\n\t\t\t\"\",\n\t\t\t\"on\",\n\t\t\t{\n\t\t\t\trole: \"switch\",\n\t\t\t\twrite: true,\n\t\t\t\tread: true,\n\t\t\t\tdef: false,\n\t\t\t\ttype: \"boolean\",\n\t\t\t\tdontDelete: true,\n\t\t\t},\n\t\t\tundefined,\n\t\t);\n\t\tthis.setState(\"TV.on\", false, true);\n\t\tthis.subscribeStates(\"*\");\n\n\t\tthis.onRefreshTimeout();\n\t}\n\n\tprivate setupRefreshTimeout(): void {\n\t\tthis.log.debug(\"Setting up refresh timeout to \" + this.refreshIntervalInMinutes);\n\n\t\tconst refreshIntervalInMilliseconds = this.refreshIntervalInMinutes * 60 * 1000;\n\t\tthis.refreshTimeout = setTimeout(this.onRefreshTimeout.bind(this), refreshIntervalInMilliseconds);\n\t}\n\n\tprivate async onRefreshTimeout(): Promise<void> {\n\t\tthis.log.debug(`refreshTimeoutFunc started triggered`);\n\n\t\tawait this.control\n\t\t\t?.isAvailable()\n\t\t\t.then(() => {\n\t\t\t\tthis.getState(STATE_NAME_INFO_CONNECTION, (error, state) => {\n\t\t\t\t\tthis.log.debug(\"GOT STATE: \" + JSON.stringify(state));\n\n\t\t\t\t\tif (!state?.val) {\n\t\t\t\t\t\tthis.setState(STATE_NAME_INFO_CONNECTION, true, true);\n\t\t\t\t\t\tthis.setState(\"TV.on\", true, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.setState(\"TV.on\", false, true);\n\t\t\t\tthis.setState(STATE_NAME_INFO_CONNECTION, false, true);\n\t\t\t});\n\n\t\tthis.setupRefreshTimeout();\n\t}\n\n\t/**\n\t * Is called when adapter is started for the first time. It will start negotiating\n\t * the access token for the configured TV.\n\t */\n\tprivate firstInit(): void {\n\t\tthis.control\n\t\t\t?.isAvailable()\n\t\t\t.then(() => {\n\t\t\t\tthis.log.debug(\"Attempting to get a token from tv...\");\n\n\t\t\t\tthis.control?.getToken((token) => {\n\t\t\t\t\tthis.log.debug(\"# Response getToken:\" + token);\n\n\t\t\t\t\tthis.config.TOKEN = token;\n\t\t\t\t\tthis.updateConfig(this.config);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(\n\t\t\t\t\t\"Could not find Token, because the TV is not reachable! Check your configuration (IP / MAC!); Retrying... \" +\n\t\t\t\t\t\terror,\n\t\t\t\t);\n\n\t\t\t\t// Since the TV is not configured. We have to try again.\n\t\t\t\tthis.retryConnectionTimeout = setTimeout(this.onReady.bind(this), 60 * 1000);\n\t\t\t});\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tif (this.refreshTimeout) clearTimeout(this.refreshTimeout);\n\t\t\tif (this.retryConnectionTimeout) clearTimeout(this.retryConnectionTimeout);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.debug(`state ${id} changed: ${JSON.stringify(state)} (ack = ${state.ack})`);\n\n\t\t\t// For now: Ignore changes to the state, that are send from this adapter.\n\t\t\tif (state.from == \"system.adapter.\" + this.namespace) {\n\t\t\t\tthis.log.debug(\"Ignoring that event, because it is send from this adapter.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst keyName = id.split(\".\")[3];\n\n\t\t\tif (!keyName) {\n\t\t\t\tthis.log.warn(\"No keyname found!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.log.debug(`found keyname: '${keyName}'`);\n\t\t\t}\n\n\t\t\tif (!this.control) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.control\n\t\t\t\t.isAvailable()\n\t\t\t\t.then((value) => {\n\t\t\t\t\tthis.log.silly(`TV aviable: '${value}'`);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.log.silly(\"TV seems to be offline\" + error);\n\t\t\t\t\tif (keyName === \"on\") {\n\t\t\t\t\t\tif (this.control && state.val) {\n\t\t\t\t\t\t\tthis.log.info(\"Sending WOL to wake up the TV.\");\n\t\t\t\t\t\t\tthis.control.turnOn();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.log.silly(\"TV is offline, doing nothing.\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tthis.control\n\t\t\t\t.isAvailable()\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst enumKeyName: KEYS = KEYS[keyName as keyof typeof KEYS];\n\n\t\t\t\t\t// Send key to TV\n\t\t\t\t\tthis.control?.sendKey(enumKeyName, function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t//throw new Error();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Control will keep connection for next messages in 1 minute\n\t\t\t\t\t// If you would like to close it immediately, you can use `closeConnection()`\n\t\t\t\t\tthis.control?.closeConnection();\n\t\t\t\t})\n\t\t\t\t.catch((e) => this.log.error(e));\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Samsung2022TvAdapter(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Samsung2022TvAdapter())();\n}\n"],
  "mappings": "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",
  "names": []
}
